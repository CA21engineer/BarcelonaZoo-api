// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ChallengeRecord is an object representing the database table.
type ChallengeRecord struct {
	ID               int          `boil:"id" json:"id" toml:"id" yaml:"id"`
	Content          string       `boil:"content" json:"content" toml:"content" yaml:"content"`
	Comment          string       `boil:"comment" json:"comment" toml:"comment" yaml:"comment"`
	ChallengeThemeID int          `boil:"challenge_theme_id" json:"challenge_theme_id" toml:"challenge_theme_id" yaml:"challenge_theme_id"`
	UserID           int          `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Record           null.Float32 `boil:"record" json:"record,omitempty" toml:"record" yaml:"record,omitempty"`
	CreatedAt        time.Time    `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *challengeRecordR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L challengeRecordL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChallengeRecordColumns = struct {
	ID               string
	Content          string
	Comment          string
	ChallengeThemeID string
	UserID           string
	Record           string
	CreatedAt        string
}{
	ID:               "id",
	Content:          "content",
	Comment:          "comment",
	ChallengeThemeID: "challenge_theme_id",
	UserID:           "user_id",
	Record:           "record",
	CreatedAt:        "created_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelpernull_Float32 struct{ field string }

func (w whereHelpernull_Float32) EQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float32) NEQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float32) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float32) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Float32) LT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float32) LTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float32) GT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float32) GTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ChallengeRecordWhere = struct {
	ID               whereHelperint
	Content          whereHelperstring
	Comment          whereHelperstring
	ChallengeThemeID whereHelperint
	UserID           whereHelperint
	Record           whereHelpernull_Float32
	CreatedAt        whereHelpertime_Time
}{
	ID:               whereHelperint{field: "`challenge_records`.`id`"},
	Content:          whereHelperstring{field: "`challenge_records`.`content`"},
	Comment:          whereHelperstring{field: "`challenge_records`.`comment`"},
	ChallengeThemeID: whereHelperint{field: "`challenge_records`.`challenge_theme_id`"},
	UserID:           whereHelperint{field: "`challenge_records`.`user_id`"},
	Record:           whereHelpernull_Float32{field: "`challenge_records`.`record`"},
	CreatedAt:        whereHelpertime_Time{field: "`challenge_records`.`created_at`"},
}

// ChallengeRecordRels is where relationship names are stored.
var ChallengeRecordRels = struct {
	ChallengeTheme string
	User           string
	Favorites      string
}{
	ChallengeTheme: "ChallengeTheme",
	User:           "User",
	Favorites:      "Favorites",
}

// challengeRecordR is where relationships are stored.
type challengeRecordR struct {
	ChallengeTheme *ChallengeTheme
	User           *User
	Favorites      FavoriteSlice
}

// NewStruct creates a new relationship struct
func (*challengeRecordR) NewStruct() *challengeRecordR {
	return &challengeRecordR{}
}

// challengeRecordL is where Load methods for each relationship are stored.
type challengeRecordL struct{}

var (
	challengeRecordAllColumns            = []string{"id", "content", "comment", "challenge_theme_id", "user_id", "record", "created_at"}
	challengeRecordColumnsWithoutDefault = []string{"content", "comment", "challenge_theme_id", "user_id", "record", "created_at"}
	challengeRecordColumnsWithDefault    = []string{"id"}
	challengeRecordPrimaryKeyColumns     = []string{"id"}
)

type (
	// ChallengeRecordSlice is an alias for a slice of pointers to ChallengeRecord.
	// This should generally be used opposed to []ChallengeRecord.
	ChallengeRecordSlice []*ChallengeRecord
	// ChallengeRecordHook is the signature for custom ChallengeRecord hook methods
	ChallengeRecordHook func(context.Context, boil.ContextExecutor, *ChallengeRecord) error

	challengeRecordQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	challengeRecordType                 = reflect.TypeOf(&ChallengeRecord{})
	challengeRecordMapping              = queries.MakeStructMapping(challengeRecordType)
	challengeRecordPrimaryKeyMapping, _ = queries.BindMapping(challengeRecordType, challengeRecordMapping, challengeRecordPrimaryKeyColumns)
	challengeRecordInsertCacheMut       sync.RWMutex
	challengeRecordInsertCache          = make(map[string]insertCache)
	challengeRecordUpdateCacheMut       sync.RWMutex
	challengeRecordUpdateCache          = make(map[string]updateCache)
	challengeRecordUpsertCacheMut       sync.RWMutex
	challengeRecordUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var challengeRecordBeforeInsertHooks []ChallengeRecordHook
var challengeRecordBeforeUpdateHooks []ChallengeRecordHook
var challengeRecordBeforeDeleteHooks []ChallengeRecordHook
var challengeRecordBeforeUpsertHooks []ChallengeRecordHook

var challengeRecordAfterInsertHooks []ChallengeRecordHook
var challengeRecordAfterSelectHooks []ChallengeRecordHook
var challengeRecordAfterUpdateHooks []ChallengeRecordHook
var challengeRecordAfterDeleteHooks []ChallengeRecordHook
var challengeRecordAfterUpsertHooks []ChallengeRecordHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ChallengeRecord) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeRecordBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ChallengeRecord) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeRecordBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ChallengeRecord) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeRecordBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ChallengeRecord) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeRecordBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ChallengeRecord) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeRecordAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ChallengeRecord) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeRecordAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ChallengeRecord) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeRecordAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ChallengeRecord) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeRecordAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ChallengeRecord) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeRecordAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChallengeRecordHook registers your hook function for all future operations.
func AddChallengeRecordHook(hookPoint boil.HookPoint, challengeRecordHook ChallengeRecordHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		challengeRecordBeforeInsertHooks = append(challengeRecordBeforeInsertHooks, challengeRecordHook)
	case boil.BeforeUpdateHook:
		challengeRecordBeforeUpdateHooks = append(challengeRecordBeforeUpdateHooks, challengeRecordHook)
	case boil.BeforeDeleteHook:
		challengeRecordBeforeDeleteHooks = append(challengeRecordBeforeDeleteHooks, challengeRecordHook)
	case boil.BeforeUpsertHook:
		challengeRecordBeforeUpsertHooks = append(challengeRecordBeforeUpsertHooks, challengeRecordHook)
	case boil.AfterInsertHook:
		challengeRecordAfterInsertHooks = append(challengeRecordAfterInsertHooks, challengeRecordHook)
	case boil.AfterSelectHook:
		challengeRecordAfterSelectHooks = append(challengeRecordAfterSelectHooks, challengeRecordHook)
	case boil.AfterUpdateHook:
		challengeRecordAfterUpdateHooks = append(challengeRecordAfterUpdateHooks, challengeRecordHook)
	case boil.AfterDeleteHook:
		challengeRecordAfterDeleteHooks = append(challengeRecordAfterDeleteHooks, challengeRecordHook)
	case boil.AfterUpsertHook:
		challengeRecordAfterUpsertHooks = append(challengeRecordAfterUpsertHooks, challengeRecordHook)
	}
}

// One returns a single challengeRecord record from the query.
func (q challengeRecordQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ChallengeRecord, error) {
	o := &ChallengeRecord{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for challenge_records")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ChallengeRecord records from the query.
func (q challengeRecordQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChallengeRecordSlice, error) {
	var o []*ChallengeRecord

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to ChallengeRecord slice")
	}

	if len(challengeRecordAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ChallengeRecord records in the query.
func (q challengeRecordQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count challenge_records rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q challengeRecordQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if challenge_records exists")
	}

	return count > 0, nil
}

// ChallengeTheme pointed to by the foreign key.
func (o *ChallengeRecord) ChallengeTheme(mods ...qm.QueryMod) challengeThemeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ChallengeThemeID),
	}

	queryMods = append(queryMods, mods...)

	query := ChallengeThemes(queryMods...)
	queries.SetFrom(query.Query, "`challenge_themes`")

	return query
}

// User pointed to by the foreign key.
func (o *ChallengeRecord) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`users`")

	return query
}

// Favorites retrieves all the favorite's Favorites with an executor.
func (o *ChallengeRecord) Favorites(mods ...qm.QueryMod) favoriteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`favorites`.`challenge_record_id`=?", o.ID),
	)

	query := Favorites(queryMods...)
	queries.SetFrom(query.Query, "`favorites`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`favorites`.*"})
	}

	return query
}

// LoadChallengeTheme allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (challengeRecordL) LoadChallengeTheme(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChallengeRecord interface{}, mods queries.Applicator) error {
	var slice []*ChallengeRecord
	var object *ChallengeRecord

	if singular {
		object = maybeChallengeRecord.(*ChallengeRecord)
	} else {
		slice = *maybeChallengeRecord.(*[]*ChallengeRecord)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &challengeRecordR{}
		}
		args = append(args, object.ChallengeThemeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &challengeRecordR{}
			}

			for _, a := range args {
				if a == obj.ChallengeThemeID {
					continue Outer
				}
			}

			args = append(args, obj.ChallengeThemeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`challenge_themes`), qm.WhereIn(`challenge_themes.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ChallengeTheme")
	}

	var resultSlice []*ChallengeTheme
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ChallengeTheme")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for challenge_themes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for challenge_themes")
	}

	if len(challengeRecordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChallengeTheme = foreign
		if foreign.R == nil {
			foreign.R = &challengeThemeR{}
		}
		foreign.R.ChallengeRecords = append(foreign.R.ChallengeRecords, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChallengeThemeID == foreign.ID {
				local.R.ChallengeTheme = foreign
				if foreign.R == nil {
					foreign.R = &challengeThemeR{}
				}
				foreign.R.ChallengeRecords = append(foreign.R.ChallengeRecords, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (challengeRecordL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChallengeRecord interface{}, mods queries.Applicator) error {
	var slice []*ChallengeRecord
	var object *ChallengeRecord

	if singular {
		object = maybeChallengeRecord.(*ChallengeRecord)
	} else {
		slice = *maybeChallengeRecord.(*[]*ChallengeRecord)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &challengeRecordR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &challengeRecordR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(challengeRecordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ChallengeRecords = append(foreign.R.ChallengeRecords, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ChallengeRecords = append(foreign.R.ChallengeRecords, local)
				break
			}
		}
	}

	return nil
}

// LoadFavorites allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (challengeRecordL) LoadFavorites(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChallengeRecord interface{}, mods queries.Applicator) error {
	var slice []*ChallengeRecord
	var object *ChallengeRecord

	if singular {
		object = maybeChallengeRecord.(*ChallengeRecord)
	} else {
		slice = *maybeChallengeRecord.(*[]*ChallengeRecord)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &challengeRecordR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &challengeRecordR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`favorites`), qm.WhereIn(`favorites.challenge_record_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load favorites")
	}

	var resultSlice []*Favorite
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice favorites")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on favorites")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for favorites")
	}

	if len(favoriteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Favorites = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &favoriteR{}
			}
			foreign.R.ChallengeRecord = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChallengeRecordID {
				local.R.Favorites = append(local.R.Favorites, foreign)
				if foreign.R == nil {
					foreign.R = &favoriteR{}
				}
				foreign.R.ChallengeRecord = local
				break
			}
		}
	}

	return nil
}

// SetChallengeTheme of the challengeRecord to the related item.
// Sets o.R.ChallengeTheme to related.
// Adds o to related.R.ChallengeRecords.
func (o *ChallengeRecord) SetChallengeTheme(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ChallengeTheme) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `challenge_records` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"challenge_theme_id"}),
		strmangle.WhereClause("`", "`", 0, challengeRecordPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChallengeThemeID = related.ID
	if o.R == nil {
		o.R = &challengeRecordR{
			ChallengeTheme: related,
		}
	} else {
		o.R.ChallengeTheme = related
	}

	if related.R == nil {
		related.R = &challengeThemeR{
			ChallengeRecords: ChallengeRecordSlice{o},
		}
	} else {
		related.R.ChallengeRecords = append(related.R.ChallengeRecords, o)
	}

	return nil
}

// SetUser of the challengeRecord to the related item.
// Sets o.R.User to related.
// Adds o to related.R.ChallengeRecords.
func (o *ChallengeRecord) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `challenge_records` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, challengeRecordPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &challengeRecordR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			ChallengeRecords: ChallengeRecordSlice{o},
		}
	} else {
		related.R.ChallengeRecords = append(related.R.ChallengeRecords, o)
	}

	return nil
}

// AddFavorites adds the given related objects to the existing relationships
// of the challenge_record, optionally inserting them as new records.
// Appends related to o.R.Favorites.
// Sets related.R.ChallengeRecord appropriately.
func (o *ChallengeRecord) AddFavorites(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Favorite) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChallengeRecordID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `favorites` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"challenge_record_id"}),
				strmangle.WhereClause("`", "`", 0, favoritePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChallengeRecordID = o.ID
		}
	}

	if o.R == nil {
		o.R = &challengeRecordR{
			Favorites: related,
		}
	} else {
		o.R.Favorites = append(o.R.Favorites, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &favoriteR{
				ChallengeRecord: o,
			}
		} else {
			rel.R.ChallengeRecord = o
		}
	}
	return nil
}

// ChallengeRecords retrieves all the records using an executor.
func ChallengeRecords(mods ...qm.QueryMod) challengeRecordQuery {
	mods = append(mods, qm.From("`challenge_records`"))
	return challengeRecordQuery{NewQuery(mods...)}
}

// FindChallengeRecord retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChallengeRecord(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ChallengeRecord, error) {
	challengeRecordObj := &ChallengeRecord{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `challenge_records` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, challengeRecordObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from challenge_records")
	}

	return challengeRecordObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ChallengeRecord) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no challenge_records provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(challengeRecordColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	challengeRecordInsertCacheMut.RLock()
	cache, cached := challengeRecordInsertCache[key]
	challengeRecordInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			challengeRecordAllColumns,
			challengeRecordColumnsWithDefault,
			challengeRecordColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(challengeRecordType, challengeRecordMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(challengeRecordType, challengeRecordMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `challenge_records` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `challenge_records` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `challenge_records` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, challengeRecordPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into challenge_records")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == challengeRecordMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for challenge_records")
	}

CacheNoHooks:
	if !cached {
		challengeRecordInsertCacheMut.Lock()
		challengeRecordInsertCache[key] = cache
		challengeRecordInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ChallengeRecord.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ChallengeRecord) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	challengeRecordUpdateCacheMut.RLock()
	cache, cached := challengeRecordUpdateCache[key]
	challengeRecordUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			challengeRecordAllColumns,
			challengeRecordPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update challenge_records, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `challenge_records` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, challengeRecordPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(challengeRecordType, challengeRecordMapping, append(wl, challengeRecordPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update challenge_records row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for challenge_records")
	}

	if !cached {
		challengeRecordUpdateCacheMut.Lock()
		challengeRecordUpdateCache[key] = cache
		challengeRecordUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q challengeRecordQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for challenge_records")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for challenge_records")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChallengeRecordSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), challengeRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `challenge_records` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, challengeRecordPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in challengeRecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all challengeRecord")
	}
	return rowsAff, nil
}

var mySQLChallengeRecordUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ChallengeRecord) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no challenge_records provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(challengeRecordColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLChallengeRecordUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	challengeRecordUpsertCacheMut.RLock()
	cache, cached := challengeRecordUpsertCache[key]
	challengeRecordUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			challengeRecordAllColumns,
			challengeRecordColumnsWithDefault,
			challengeRecordColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			challengeRecordAllColumns,
			challengeRecordPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert challenge_records, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "challenge_records", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `challenge_records` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(challengeRecordType, challengeRecordMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(challengeRecordType, challengeRecordMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for challenge_records")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == challengeRecordMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(challengeRecordType, challengeRecordMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for challenge_records")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for challenge_records")
	}

CacheNoHooks:
	if !cached {
		challengeRecordUpsertCacheMut.Lock()
		challengeRecordUpsertCache[key] = cache
		challengeRecordUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ChallengeRecord record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ChallengeRecord) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no ChallengeRecord provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), challengeRecordPrimaryKeyMapping)
	sql := "DELETE FROM `challenge_records` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from challenge_records")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for challenge_records")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q challengeRecordQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no challengeRecordQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from challenge_records")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for challenge_records")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChallengeRecordSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(challengeRecordBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), challengeRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `challenge_records` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, challengeRecordPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from challengeRecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for challenge_records")
	}

	if len(challengeRecordAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ChallengeRecord) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChallengeRecord(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChallengeRecordSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChallengeRecordSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), challengeRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `challenge_records`.* FROM `challenge_records` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, challengeRecordPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ChallengeRecordSlice")
	}

	*o = slice

	return nil
}

// ChallengeRecordExists checks if the ChallengeRecord row exists.
func ChallengeRecordExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `challenge_records` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if challenge_records exists")
	}

	return exists, nil
}
