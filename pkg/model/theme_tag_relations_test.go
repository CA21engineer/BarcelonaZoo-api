// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testThemeTagRelations(t *testing.T) {
	t.Parallel()

	query := ThemeTagRelations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testThemeTagRelationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThemeTagRelation{}
	if err = randomize.Struct(seed, o, themeTagRelationDBTypes, true, themeTagRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThemeTagRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ThemeTagRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testThemeTagRelationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThemeTagRelation{}
	if err = randomize.Struct(seed, o, themeTagRelationDBTypes, true, themeTagRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThemeTagRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ThemeTagRelations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ThemeTagRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testThemeTagRelationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThemeTagRelation{}
	if err = randomize.Struct(seed, o, themeTagRelationDBTypes, true, themeTagRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThemeTagRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ThemeTagRelationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ThemeTagRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testThemeTagRelationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThemeTagRelation{}
	if err = randomize.Struct(seed, o, themeTagRelationDBTypes, true, themeTagRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThemeTagRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ThemeTagRelationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ThemeTagRelation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ThemeTagRelationExists to return true, but got false.")
	}
}

func testThemeTagRelationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThemeTagRelation{}
	if err = randomize.Struct(seed, o, themeTagRelationDBTypes, true, themeTagRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThemeTagRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	themeTagRelationFound, err := FindThemeTagRelation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if themeTagRelationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testThemeTagRelationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThemeTagRelation{}
	if err = randomize.Struct(seed, o, themeTagRelationDBTypes, true, themeTagRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThemeTagRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ThemeTagRelations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testThemeTagRelationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThemeTagRelation{}
	if err = randomize.Struct(seed, o, themeTagRelationDBTypes, true, themeTagRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThemeTagRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ThemeTagRelations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testThemeTagRelationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	themeTagRelationOne := &ThemeTagRelation{}
	themeTagRelationTwo := &ThemeTagRelation{}
	if err = randomize.Struct(seed, themeTagRelationOne, themeTagRelationDBTypes, false, themeTagRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThemeTagRelation struct: %s", err)
	}
	if err = randomize.Struct(seed, themeTagRelationTwo, themeTagRelationDBTypes, false, themeTagRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThemeTagRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = themeTagRelationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = themeTagRelationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ThemeTagRelations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testThemeTagRelationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	themeTagRelationOne := &ThemeTagRelation{}
	themeTagRelationTwo := &ThemeTagRelation{}
	if err = randomize.Struct(seed, themeTagRelationOne, themeTagRelationDBTypes, false, themeTagRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThemeTagRelation struct: %s", err)
	}
	if err = randomize.Struct(seed, themeTagRelationTwo, themeTagRelationDBTypes, false, themeTagRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThemeTagRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = themeTagRelationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = themeTagRelationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ThemeTagRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func themeTagRelationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ThemeTagRelation) error {
	*o = ThemeTagRelation{}
	return nil
}

func themeTagRelationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ThemeTagRelation) error {
	*o = ThemeTagRelation{}
	return nil
}

func themeTagRelationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ThemeTagRelation) error {
	*o = ThemeTagRelation{}
	return nil
}

func themeTagRelationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ThemeTagRelation) error {
	*o = ThemeTagRelation{}
	return nil
}

func themeTagRelationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ThemeTagRelation) error {
	*o = ThemeTagRelation{}
	return nil
}

func themeTagRelationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ThemeTagRelation) error {
	*o = ThemeTagRelation{}
	return nil
}

func themeTagRelationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ThemeTagRelation) error {
	*o = ThemeTagRelation{}
	return nil
}

func themeTagRelationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ThemeTagRelation) error {
	*o = ThemeTagRelation{}
	return nil
}

func themeTagRelationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ThemeTagRelation) error {
	*o = ThemeTagRelation{}
	return nil
}

func testThemeTagRelationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ThemeTagRelation{}
	o := &ThemeTagRelation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, themeTagRelationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ThemeTagRelation object: %s", err)
	}

	AddThemeTagRelationHook(boil.BeforeInsertHook, themeTagRelationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	themeTagRelationBeforeInsertHooks = []ThemeTagRelationHook{}

	AddThemeTagRelationHook(boil.AfterInsertHook, themeTagRelationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	themeTagRelationAfterInsertHooks = []ThemeTagRelationHook{}

	AddThemeTagRelationHook(boil.AfterSelectHook, themeTagRelationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	themeTagRelationAfterSelectHooks = []ThemeTagRelationHook{}

	AddThemeTagRelationHook(boil.BeforeUpdateHook, themeTagRelationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	themeTagRelationBeforeUpdateHooks = []ThemeTagRelationHook{}

	AddThemeTagRelationHook(boil.AfterUpdateHook, themeTagRelationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	themeTagRelationAfterUpdateHooks = []ThemeTagRelationHook{}

	AddThemeTagRelationHook(boil.BeforeDeleteHook, themeTagRelationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	themeTagRelationBeforeDeleteHooks = []ThemeTagRelationHook{}

	AddThemeTagRelationHook(boil.AfterDeleteHook, themeTagRelationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	themeTagRelationAfterDeleteHooks = []ThemeTagRelationHook{}

	AddThemeTagRelationHook(boil.BeforeUpsertHook, themeTagRelationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	themeTagRelationBeforeUpsertHooks = []ThemeTagRelationHook{}

	AddThemeTagRelationHook(boil.AfterUpsertHook, themeTagRelationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	themeTagRelationAfterUpsertHooks = []ThemeTagRelationHook{}
}

func testThemeTagRelationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThemeTagRelation{}
	if err = randomize.Struct(seed, o, themeTagRelationDBTypes, true, themeTagRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThemeTagRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ThemeTagRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testThemeTagRelationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThemeTagRelation{}
	if err = randomize.Struct(seed, o, themeTagRelationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ThemeTagRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(themeTagRelationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ThemeTagRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testThemeTagRelationToOneChallengeThemeUsingChallengeTheme(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ThemeTagRelation
	var foreign ChallengeTheme

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, themeTagRelationDBTypes, false, themeTagRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThemeTagRelation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, challengeThemeDBTypes, false, challengeThemeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChallengeTheme struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ChallengeThemeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ChallengeTheme().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ThemeTagRelationSlice{&local}
	if err = local.L.LoadChallengeTheme(ctx, tx, false, (*[]*ThemeTagRelation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ChallengeTheme == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ChallengeTheme = nil
	if err = local.L.LoadChallengeTheme(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ChallengeTheme == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testThemeTagRelationToOneTagUsingTag(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ThemeTagRelation
	var foreign Tag

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, themeTagRelationDBTypes, false, themeTagRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThemeTagRelation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tagDBTypes, false, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TagID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Tag().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ThemeTagRelationSlice{&local}
	if err = local.L.LoadTag(ctx, tx, false, (*[]*ThemeTagRelation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Tag = nil
	if err = local.L.LoadTag(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testThemeTagRelationToOneSetOpChallengeThemeUsingChallengeTheme(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ThemeTagRelation
	var b, c ChallengeTheme

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, themeTagRelationDBTypes, false, strmangle.SetComplement(themeTagRelationPrimaryKeyColumns, themeTagRelationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, challengeThemeDBTypes, false, strmangle.SetComplement(challengeThemePrimaryKeyColumns, challengeThemeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, challengeThemeDBTypes, false, strmangle.SetComplement(challengeThemePrimaryKeyColumns, challengeThemeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ChallengeTheme{&b, &c} {
		err = a.SetChallengeTheme(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ChallengeTheme != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ThemeTagRelations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ChallengeThemeID != x.ID {
			t.Error("foreign key was wrong value", a.ChallengeThemeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ChallengeThemeID))
		reflect.Indirect(reflect.ValueOf(&a.ChallengeThemeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ChallengeThemeID != x.ID {
			t.Error("foreign key was wrong value", a.ChallengeThemeID, x.ID)
		}
	}
}
func testThemeTagRelationToOneSetOpTagUsingTag(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ThemeTagRelation
	var b, c Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, themeTagRelationDBTypes, false, strmangle.SetComplement(themeTagRelationPrimaryKeyColumns, themeTagRelationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Tag{&b, &c} {
		err = a.SetTag(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Tag != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ThemeTagRelations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TagID != x.ID {
			t.Error("foreign key was wrong value", a.TagID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TagID))
		reflect.Indirect(reflect.ValueOf(&a.TagID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TagID != x.ID {
			t.Error("foreign key was wrong value", a.TagID, x.ID)
		}
	}
}

func testThemeTagRelationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThemeTagRelation{}
	if err = randomize.Struct(seed, o, themeTagRelationDBTypes, true, themeTagRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThemeTagRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testThemeTagRelationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThemeTagRelation{}
	if err = randomize.Struct(seed, o, themeTagRelationDBTypes, true, themeTagRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThemeTagRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ThemeTagRelationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testThemeTagRelationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThemeTagRelation{}
	if err = randomize.Struct(seed, o, themeTagRelationDBTypes, true, themeTagRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThemeTagRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ThemeTagRelations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	themeTagRelationDBTypes = map[string]string{`ID`: `int`, `ChallengeThemeID`: `int`, `TagID`: `int`}
	_                       = bytes.MinRead
)

func testThemeTagRelationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(themeTagRelationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(themeTagRelationAllColumns) == len(themeTagRelationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ThemeTagRelation{}
	if err = randomize.Struct(seed, o, themeTagRelationDBTypes, true, themeTagRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThemeTagRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ThemeTagRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, themeTagRelationDBTypes, true, themeTagRelationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ThemeTagRelation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testThemeTagRelationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(themeTagRelationAllColumns) == len(themeTagRelationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ThemeTagRelation{}
	if err = randomize.Struct(seed, o, themeTagRelationDBTypes, true, themeTagRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThemeTagRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ThemeTagRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, themeTagRelationDBTypes, true, themeTagRelationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ThemeTagRelation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(themeTagRelationAllColumns, themeTagRelationPrimaryKeyColumns) {
		fields = themeTagRelationAllColumns
	} else {
		fields = strmangle.SetComplement(
			themeTagRelationAllColumns,
			themeTagRelationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ThemeTagRelationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testThemeTagRelationsUpsert(t *testing.T) {
	t.Parallel()

	if len(themeTagRelationAllColumns) == len(themeTagRelationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLThemeTagRelationUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ThemeTagRelation{}
	if err = randomize.Struct(seed, &o, themeTagRelationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ThemeTagRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ThemeTagRelation: %s", err)
	}

	count, err := ThemeTagRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, themeTagRelationDBTypes, false, themeTagRelationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ThemeTagRelation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ThemeTagRelation: %s", err)
	}

	count, err = ThemeTagRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
