// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ChallengeTheme is an object representing the database table.
type ChallengeTheme struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title       string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	Content     string      `boil:"content" json:"content" toml:"content" yaml:"content"`
	Description string      `boil:"description" json:"description" toml:"description" yaml:"description"`
	UserID      int         `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Recordable  bool        `boil:"recordable" json:"recordable" toml:"recordable" yaml:"recordable"`
	IsInt       null.Bool   `boil:"is_int" json:"is_int,omitempty" toml:"is_int" yaml:"is_int,omitempty"`
	Unit        null.String `boil:"unit" json:"unit,omitempty" toml:"unit" yaml:"unit,omitempty"`
	RankingType null.Int8   `boil:"ranking_type" json:"ranking_type,omitempty" toml:"ranking_type" yaml:"ranking_type,omitempty"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *challengeThemeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L challengeThemeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChallengeThemeColumns = struct {
	ID          string
	Title       string
	Content     string
	Description string
	UserID      string
	Recordable  string
	IsInt       string
	Unit        string
	RankingType string
	CreatedAt   string
}{
	ID:          "id",
	Title:       "title",
	Content:     "content",
	Description: "description",
	UserID:      "user_id",
	Recordable:  "recordable",
	IsInt:       "is_int",
	Unit:        "unit",
	RankingType: "ranking_type",
	CreatedAt:   "created_at",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Int8 struct{ field string }

func (w whereHelpernull_Int8) EQ(x null.Int8) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int8) NEQ(x null.Int8) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int8) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int8) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int8) LT(x null.Int8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int8) LTE(x null.Int8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int8) GT(x null.Int8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int8) GTE(x null.Int8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ChallengeThemeWhere = struct {
	ID          whereHelperint
	Title       whereHelperstring
	Content     whereHelperstring
	Description whereHelperstring
	UserID      whereHelperint
	Recordable  whereHelperbool
	IsInt       whereHelpernull_Bool
	Unit        whereHelpernull_String
	RankingType whereHelpernull_Int8
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint{field: "`challenge_themes`.`id`"},
	Title:       whereHelperstring{field: "`challenge_themes`.`title`"},
	Content:     whereHelperstring{field: "`challenge_themes`.`content`"},
	Description: whereHelperstring{field: "`challenge_themes`.`description`"},
	UserID:      whereHelperint{field: "`challenge_themes`.`user_id`"},
	Recordable:  whereHelperbool{field: "`challenge_themes`.`recordable`"},
	IsInt:       whereHelpernull_Bool{field: "`challenge_themes`.`is_int`"},
	Unit:        whereHelpernull_String{field: "`challenge_themes`.`unit`"},
	RankingType: whereHelpernull_Int8{field: "`challenge_themes`.`ranking_type`"},
	CreatedAt:   whereHelpertime_Time{field: "`challenge_themes`.`created_at`"},
}

// ChallengeThemeRels is where relationship names are stored.
var ChallengeThemeRels = struct {
	User              string
	ChallengeRecords  string
	ThemeTagRelations string
}{
	User:              "User",
	ChallengeRecords:  "ChallengeRecords",
	ThemeTagRelations: "ThemeTagRelations",
}

// challengeThemeR is where relationships are stored.
type challengeThemeR struct {
	User              *User
	ChallengeRecords  ChallengeRecordSlice
	ThemeTagRelations ThemeTagRelationSlice
}

// NewStruct creates a new relationship struct
func (*challengeThemeR) NewStruct() *challengeThemeR {
	return &challengeThemeR{}
}

// challengeThemeL is where Load methods for each relationship are stored.
type challengeThemeL struct{}

var (
	challengeThemeAllColumns            = []string{"id", "title", "content", "description", "user_id", "recordable", "is_int", "unit", "ranking_type", "created_at"}
	challengeThemeColumnsWithoutDefault = []string{"title", "content", "description", "user_id", "recordable", "is_int", "unit", "ranking_type", "created_at"}
	challengeThemeColumnsWithDefault    = []string{"id"}
	challengeThemePrimaryKeyColumns     = []string{"id"}
)

type (
	// ChallengeThemeSlice is an alias for a slice of pointers to ChallengeTheme.
	// This should generally be used opposed to []ChallengeTheme.
	ChallengeThemeSlice []*ChallengeTheme
	// ChallengeThemeHook is the signature for custom ChallengeTheme hook methods
	ChallengeThemeHook func(context.Context, boil.ContextExecutor, *ChallengeTheme) error

	challengeThemeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	challengeThemeType                 = reflect.TypeOf(&ChallengeTheme{})
	challengeThemeMapping              = queries.MakeStructMapping(challengeThemeType)
	challengeThemePrimaryKeyMapping, _ = queries.BindMapping(challengeThemeType, challengeThemeMapping, challengeThemePrimaryKeyColumns)
	challengeThemeInsertCacheMut       sync.RWMutex
	challengeThemeInsertCache          = make(map[string]insertCache)
	challengeThemeUpdateCacheMut       sync.RWMutex
	challengeThemeUpdateCache          = make(map[string]updateCache)
	challengeThemeUpsertCacheMut       sync.RWMutex
	challengeThemeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var challengeThemeBeforeInsertHooks []ChallengeThemeHook
var challengeThemeBeforeUpdateHooks []ChallengeThemeHook
var challengeThemeBeforeDeleteHooks []ChallengeThemeHook
var challengeThemeBeforeUpsertHooks []ChallengeThemeHook

var challengeThemeAfterInsertHooks []ChallengeThemeHook
var challengeThemeAfterSelectHooks []ChallengeThemeHook
var challengeThemeAfterUpdateHooks []ChallengeThemeHook
var challengeThemeAfterDeleteHooks []ChallengeThemeHook
var challengeThemeAfterUpsertHooks []ChallengeThemeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ChallengeTheme) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeThemeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ChallengeTheme) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeThemeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ChallengeTheme) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeThemeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ChallengeTheme) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeThemeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ChallengeTheme) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeThemeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ChallengeTheme) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeThemeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ChallengeTheme) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeThemeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ChallengeTheme) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeThemeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ChallengeTheme) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeThemeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChallengeThemeHook registers your hook function for all future operations.
func AddChallengeThemeHook(hookPoint boil.HookPoint, challengeThemeHook ChallengeThemeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		challengeThemeBeforeInsertHooks = append(challengeThemeBeforeInsertHooks, challengeThemeHook)
	case boil.BeforeUpdateHook:
		challengeThemeBeforeUpdateHooks = append(challengeThemeBeforeUpdateHooks, challengeThemeHook)
	case boil.BeforeDeleteHook:
		challengeThemeBeforeDeleteHooks = append(challengeThemeBeforeDeleteHooks, challengeThemeHook)
	case boil.BeforeUpsertHook:
		challengeThemeBeforeUpsertHooks = append(challengeThemeBeforeUpsertHooks, challengeThemeHook)
	case boil.AfterInsertHook:
		challengeThemeAfterInsertHooks = append(challengeThemeAfterInsertHooks, challengeThemeHook)
	case boil.AfterSelectHook:
		challengeThemeAfterSelectHooks = append(challengeThemeAfterSelectHooks, challengeThemeHook)
	case boil.AfterUpdateHook:
		challengeThemeAfterUpdateHooks = append(challengeThemeAfterUpdateHooks, challengeThemeHook)
	case boil.AfterDeleteHook:
		challengeThemeAfterDeleteHooks = append(challengeThemeAfterDeleteHooks, challengeThemeHook)
	case boil.AfterUpsertHook:
		challengeThemeAfterUpsertHooks = append(challengeThemeAfterUpsertHooks, challengeThemeHook)
	}
}

// One returns a single challengeTheme record from the query.
func (q challengeThemeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ChallengeTheme, error) {
	o := &ChallengeTheme{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for challenge_themes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ChallengeTheme records from the query.
func (q challengeThemeQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChallengeThemeSlice, error) {
	var o []*ChallengeTheme

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to ChallengeTheme slice")
	}

	if len(challengeThemeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ChallengeTheme records in the query.
func (q challengeThemeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count challenge_themes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q challengeThemeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if challenge_themes exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *ChallengeTheme) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`users`")

	return query
}

// ChallengeRecords retrieves all the challenge_record's ChallengeRecords with an executor.
func (o *ChallengeTheme) ChallengeRecords(mods ...qm.QueryMod) challengeRecordQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`challenge_records`.`challenge_theme_id`=?", o.ID),
	)

	query := ChallengeRecords(queryMods...)
	queries.SetFrom(query.Query, "`challenge_records`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`challenge_records`.*"})
	}

	return query
}

// ThemeTagRelations retrieves all the theme_tag_relation's ThemeTagRelations with an executor.
func (o *ChallengeTheme) ThemeTagRelations(mods ...qm.QueryMod) themeTagRelationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`theme_tag_relations`.`challenge_theme_id`=?", o.ID),
	)

	query := ThemeTagRelations(queryMods...)
	queries.SetFrom(query.Query, "`theme_tag_relations`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`theme_tag_relations`.*"})
	}

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (challengeThemeL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChallengeTheme interface{}, mods queries.Applicator) error {
	var slice []*ChallengeTheme
	var object *ChallengeTheme

	if singular {
		object = maybeChallengeTheme.(*ChallengeTheme)
	} else {
		slice = *maybeChallengeTheme.(*[]*ChallengeTheme)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &challengeThemeR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &challengeThemeR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(challengeThemeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ChallengeThemes = append(foreign.R.ChallengeThemes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ChallengeThemes = append(foreign.R.ChallengeThemes, local)
				break
			}
		}
	}

	return nil
}

// LoadChallengeRecords allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (challengeThemeL) LoadChallengeRecords(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChallengeTheme interface{}, mods queries.Applicator) error {
	var slice []*ChallengeTheme
	var object *ChallengeTheme

	if singular {
		object = maybeChallengeTheme.(*ChallengeTheme)
	} else {
		slice = *maybeChallengeTheme.(*[]*ChallengeTheme)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &challengeThemeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &challengeThemeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`challenge_records`), qm.WhereIn(`challenge_records.challenge_theme_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load challenge_records")
	}

	var resultSlice []*ChallengeRecord
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice challenge_records")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on challenge_records")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for challenge_records")
	}

	if len(challengeRecordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChallengeRecords = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &challengeRecordR{}
			}
			foreign.R.ChallengeTheme = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChallengeThemeID {
				local.R.ChallengeRecords = append(local.R.ChallengeRecords, foreign)
				if foreign.R == nil {
					foreign.R = &challengeRecordR{}
				}
				foreign.R.ChallengeTheme = local
				break
			}
		}
	}

	return nil
}

// LoadThemeTagRelations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (challengeThemeL) LoadThemeTagRelations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChallengeTheme interface{}, mods queries.Applicator) error {
	var slice []*ChallengeTheme
	var object *ChallengeTheme

	if singular {
		object = maybeChallengeTheme.(*ChallengeTheme)
	} else {
		slice = *maybeChallengeTheme.(*[]*ChallengeTheme)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &challengeThemeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &challengeThemeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`theme_tag_relations`), qm.WhereIn(`theme_tag_relations.challenge_theme_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load theme_tag_relations")
	}

	var resultSlice []*ThemeTagRelation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice theme_tag_relations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on theme_tag_relations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for theme_tag_relations")
	}

	if len(themeTagRelationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ThemeTagRelations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &themeTagRelationR{}
			}
			foreign.R.ChallengeTheme = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChallengeThemeID {
				local.R.ThemeTagRelations = append(local.R.ThemeTagRelations, foreign)
				if foreign.R == nil {
					foreign.R = &themeTagRelationR{}
				}
				foreign.R.ChallengeTheme = local
				break
			}
		}
	}

	return nil
}

// SetUser of the challengeTheme to the related item.
// Sets o.R.User to related.
// Adds o to related.R.ChallengeThemes.
func (o *ChallengeTheme) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `challenge_themes` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, challengeThemePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &challengeThemeR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			ChallengeThemes: ChallengeThemeSlice{o},
		}
	} else {
		related.R.ChallengeThemes = append(related.R.ChallengeThemes, o)
	}

	return nil
}

// AddChallengeRecords adds the given related objects to the existing relationships
// of the challenge_theme, optionally inserting them as new records.
// Appends related to o.R.ChallengeRecords.
// Sets related.R.ChallengeTheme appropriately.
func (o *ChallengeTheme) AddChallengeRecords(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ChallengeRecord) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChallengeThemeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `challenge_records` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"challenge_theme_id"}),
				strmangle.WhereClause("`", "`", 0, challengeRecordPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChallengeThemeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &challengeThemeR{
			ChallengeRecords: related,
		}
	} else {
		o.R.ChallengeRecords = append(o.R.ChallengeRecords, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &challengeRecordR{
				ChallengeTheme: o,
			}
		} else {
			rel.R.ChallengeTheme = o
		}
	}
	return nil
}

// AddThemeTagRelations adds the given related objects to the existing relationships
// of the challenge_theme, optionally inserting them as new records.
// Appends related to o.R.ThemeTagRelations.
// Sets related.R.ChallengeTheme appropriately.
func (o *ChallengeTheme) AddThemeTagRelations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ThemeTagRelation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChallengeThemeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `theme_tag_relations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"challenge_theme_id"}),
				strmangle.WhereClause("`", "`", 0, themeTagRelationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChallengeThemeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &challengeThemeR{
			ThemeTagRelations: related,
		}
	} else {
		o.R.ThemeTagRelations = append(o.R.ThemeTagRelations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &themeTagRelationR{
				ChallengeTheme: o,
			}
		} else {
			rel.R.ChallengeTheme = o
		}
	}
	return nil
}

// ChallengeThemes retrieves all the records using an executor.
func ChallengeThemes(mods ...qm.QueryMod) challengeThemeQuery {
	mods = append(mods, qm.From("`challenge_themes`"))
	return challengeThemeQuery{NewQuery(mods...)}
}

// FindChallengeTheme retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChallengeTheme(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ChallengeTheme, error) {
	challengeThemeObj := &ChallengeTheme{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `challenge_themes` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, challengeThemeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from challenge_themes")
	}

	return challengeThemeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ChallengeTheme) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no challenge_themes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(challengeThemeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	challengeThemeInsertCacheMut.RLock()
	cache, cached := challengeThemeInsertCache[key]
	challengeThemeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			challengeThemeAllColumns,
			challengeThemeColumnsWithDefault,
			challengeThemeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(challengeThemeType, challengeThemeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(challengeThemeType, challengeThemeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `challenge_themes` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `challenge_themes` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `challenge_themes` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, challengeThemePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into challenge_themes")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == challengeThemeMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for challenge_themes")
	}

CacheNoHooks:
	if !cached {
		challengeThemeInsertCacheMut.Lock()
		challengeThemeInsertCache[key] = cache
		challengeThemeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ChallengeTheme.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ChallengeTheme) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	challengeThemeUpdateCacheMut.RLock()
	cache, cached := challengeThemeUpdateCache[key]
	challengeThemeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			challengeThemeAllColumns,
			challengeThemePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update challenge_themes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `challenge_themes` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, challengeThemePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(challengeThemeType, challengeThemeMapping, append(wl, challengeThemePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update challenge_themes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for challenge_themes")
	}

	if !cached {
		challengeThemeUpdateCacheMut.Lock()
		challengeThemeUpdateCache[key] = cache
		challengeThemeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q challengeThemeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for challenge_themes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for challenge_themes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChallengeThemeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), challengeThemePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `challenge_themes` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, challengeThemePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in challengeTheme slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all challengeTheme")
	}
	return rowsAff, nil
}

var mySQLChallengeThemeUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ChallengeTheme) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no challenge_themes provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(challengeThemeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLChallengeThemeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	challengeThemeUpsertCacheMut.RLock()
	cache, cached := challengeThemeUpsertCache[key]
	challengeThemeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			challengeThemeAllColumns,
			challengeThemeColumnsWithDefault,
			challengeThemeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			challengeThemeAllColumns,
			challengeThemePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert challenge_themes, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "challenge_themes", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `challenge_themes` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(challengeThemeType, challengeThemeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(challengeThemeType, challengeThemeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for challenge_themes")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == challengeThemeMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(challengeThemeType, challengeThemeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for challenge_themes")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for challenge_themes")
	}

CacheNoHooks:
	if !cached {
		challengeThemeUpsertCacheMut.Lock()
		challengeThemeUpsertCache[key] = cache
		challengeThemeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ChallengeTheme record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ChallengeTheme) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no ChallengeTheme provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), challengeThemePrimaryKeyMapping)
	sql := "DELETE FROM `challenge_themes` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from challenge_themes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for challenge_themes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q challengeThemeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no challengeThemeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from challenge_themes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for challenge_themes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChallengeThemeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(challengeThemeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), challengeThemePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `challenge_themes` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, challengeThemePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from challengeTheme slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for challenge_themes")
	}

	if len(challengeThemeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ChallengeTheme) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChallengeTheme(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChallengeThemeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChallengeThemeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), challengeThemePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `challenge_themes`.* FROM `challenge_themes` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, challengeThemePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ChallengeThemeSlice")
	}

	*o = slice

	return nil
}

// ChallengeThemeExists checks if the ChallengeTheme row exists.
func ChallengeThemeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `challenge_themes` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if challenge_themes exists")
	}

	return exists, nil
}
