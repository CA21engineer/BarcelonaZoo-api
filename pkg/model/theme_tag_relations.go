// Code generated by SQLBoiler 4.0.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ThemeTagRelation is an object representing the database table.
type ThemeTagRelation struct {
	ID               int `boil:"id" json:"id" toml:"id" yaml:"id"`
	ChallengeThemeID int `boil:"challenge_theme_id" json:"challenge_theme_id" toml:"challenge_theme_id" yaml:"challenge_theme_id"`
	TagID            int `boil:"tag_id" json:"tag_id" toml:"tag_id" yaml:"tag_id"`

	R *themeTagRelationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L themeTagRelationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ThemeTagRelationColumns = struct {
	ID               string
	ChallengeThemeID string
	TagID            string
}{
	ID:               "id",
	ChallengeThemeID: "challenge_theme_id",
	TagID:            "tag_id",
}

// Generated where

var ThemeTagRelationWhere = struct {
	ID               whereHelperint
	ChallengeThemeID whereHelperint
	TagID            whereHelperint
}{
	ID:               whereHelperint{field: "`theme_tag_relations`.`id`"},
	ChallengeThemeID: whereHelperint{field: "`theme_tag_relations`.`challenge_theme_id`"},
	TagID:            whereHelperint{field: "`theme_tag_relations`.`tag_id`"},
}

// ThemeTagRelationRels is where relationship names are stored.
var ThemeTagRelationRels = struct {
	ChallengeTheme string
	Tag            string
}{
	ChallengeTheme: "ChallengeTheme",
	Tag:            "Tag",
}

// themeTagRelationR is where relationships are stored.
type themeTagRelationR struct {
	ChallengeTheme *ChallengeTheme
	Tag            *Tag
}

// NewStruct creates a new relationship struct
func (*themeTagRelationR) NewStruct() *themeTagRelationR {
	return &themeTagRelationR{}
}

// themeTagRelationL is where Load methods for each relationship are stored.
type themeTagRelationL struct{}

var (
	themeTagRelationAllColumns            = []string{"id", "challenge_theme_id", "tag_id"}
	themeTagRelationColumnsWithoutDefault = []string{"challenge_theme_id", "tag_id"}
	themeTagRelationColumnsWithDefault    = []string{"id"}
	themeTagRelationPrimaryKeyColumns     = []string{"id"}
)

type (
	// ThemeTagRelationSlice is an alias for a slice of pointers to ThemeTagRelation.
	// This should generally be used opposed to []ThemeTagRelation.
	ThemeTagRelationSlice []*ThemeTagRelation
	// ThemeTagRelationHook is the signature for custom ThemeTagRelation hook methods
	ThemeTagRelationHook func(context.Context, boil.ContextExecutor, *ThemeTagRelation) error

	themeTagRelationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	themeTagRelationType                 = reflect.TypeOf(&ThemeTagRelation{})
	themeTagRelationMapping              = queries.MakeStructMapping(themeTagRelationType)
	themeTagRelationPrimaryKeyMapping, _ = queries.BindMapping(themeTagRelationType, themeTagRelationMapping, themeTagRelationPrimaryKeyColumns)
	themeTagRelationInsertCacheMut       sync.RWMutex
	themeTagRelationInsertCache          = make(map[string]insertCache)
	themeTagRelationUpdateCacheMut       sync.RWMutex
	themeTagRelationUpdateCache          = make(map[string]updateCache)
	themeTagRelationUpsertCacheMut       sync.RWMutex
	themeTagRelationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var themeTagRelationBeforeInsertHooks []ThemeTagRelationHook
var themeTagRelationBeforeUpdateHooks []ThemeTagRelationHook
var themeTagRelationBeforeDeleteHooks []ThemeTagRelationHook
var themeTagRelationBeforeUpsertHooks []ThemeTagRelationHook

var themeTagRelationAfterInsertHooks []ThemeTagRelationHook
var themeTagRelationAfterSelectHooks []ThemeTagRelationHook
var themeTagRelationAfterUpdateHooks []ThemeTagRelationHook
var themeTagRelationAfterDeleteHooks []ThemeTagRelationHook
var themeTagRelationAfterUpsertHooks []ThemeTagRelationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ThemeTagRelation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range themeTagRelationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ThemeTagRelation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range themeTagRelationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ThemeTagRelation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range themeTagRelationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ThemeTagRelation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range themeTagRelationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ThemeTagRelation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range themeTagRelationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ThemeTagRelation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range themeTagRelationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ThemeTagRelation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range themeTagRelationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ThemeTagRelation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range themeTagRelationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ThemeTagRelation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range themeTagRelationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddThemeTagRelationHook registers your hook function for all future operations.
func AddThemeTagRelationHook(hookPoint boil.HookPoint, themeTagRelationHook ThemeTagRelationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		themeTagRelationBeforeInsertHooks = append(themeTagRelationBeforeInsertHooks, themeTagRelationHook)
	case boil.BeforeUpdateHook:
		themeTagRelationBeforeUpdateHooks = append(themeTagRelationBeforeUpdateHooks, themeTagRelationHook)
	case boil.BeforeDeleteHook:
		themeTagRelationBeforeDeleteHooks = append(themeTagRelationBeforeDeleteHooks, themeTagRelationHook)
	case boil.BeforeUpsertHook:
		themeTagRelationBeforeUpsertHooks = append(themeTagRelationBeforeUpsertHooks, themeTagRelationHook)
	case boil.AfterInsertHook:
		themeTagRelationAfterInsertHooks = append(themeTagRelationAfterInsertHooks, themeTagRelationHook)
	case boil.AfterSelectHook:
		themeTagRelationAfterSelectHooks = append(themeTagRelationAfterSelectHooks, themeTagRelationHook)
	case boil.AfterUpdateHook:
		themeTagRelationAfterUpdateHooks = append(themeTagRelationAfterUpdateHooks, themeTagRelationHook)
	case boil.AfterDeleteHook:
		themeTagRelationAfterDeleteHooks = append(themeTagRelationAfterDeleteHooks, themeTagRelationHook)
	case boil.AfterUpsertHook:
		themeTagRelationAfterUpsertHooks = append(themeTagRelationAfterUpsertHooks, themeTagRelationHook)
	}
}

// One returns a single themeTagRelation record from the query.
func (q themeTagRelationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ThemeTagRelation, error) {
	o := &ThemeTagRelation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for theme_tag_relations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ThemeTagRelation records from the query.
func (q themeTagRelationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ThemeTagRelationSlice, error) {
	var o []*ThemeTagRelation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to ThemeTagRelation slice")
	}

	if len(themeTagRelationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ThemeTagRelation records in the query.
func (q themeTagRelationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count theme_tag_relations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q themeTagRelationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if theme_tag_relations exists")
	}

	return count > 0, nil
}

// ChallengeTheme pointed to by the foreign key.
func (o *ThemeTagRelation) ChallengeTheme(mods ...qm.QueryMod) challengeThemeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ChallengeThemeID),
	}

	queryMods = append(queryMods, mods...)

	query := ChallengeThemes(queryMods...)
	queries.SetFrom(query.Query, "`challenge_themes`")

	return query
}

// Tag pointed to by the foreign key.
func (o *ThemeTagRelation) Tag(mods ...qm.QueryMod) tagQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.TagID),
	}

	queryMods = append(queryMods, mods...)

	query := Tags(queryMods...)
	queries.SetFrom(query.Query, "`tags`")

	return query
}

// LoadChallengeTheme allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (themeTagRelationL) LoadChallengeTheme(ctx context.Context, e boil.ContextExecutor, singular bool, maybeThemeTagRelation interface{}, mods queries.Applicator) error {
	var slice []*ThemeTagRelation
	var object *ThemeTagRelation

	if singular {
		object = maybeThemeTagRelation.(*ThemeTagRelation)
	} else {
		slice = *maybeThemeTagRelation.(*[]*ThemeTagRelation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &themeTagRelationR{}
		}
		args = append(args, object.ChallengeThemeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &themeTagRelationR{}
			}

			for _, a := range args {
				if a == obj.ChallengeThemeID {
					continue Outer
				}
			}

			args = append(args, obj.ChallengeThemeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`challenge_themes`),
		qm.WhereIn(`challenge_themes.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ChallengeTheme")
	}

	var resultSlice []*ChallengeTheme
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ChallengeTheme")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for challenge_themes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for challenge_themes")
	}

	if len(themeTagRelationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChallengeTheme = foreign
		if foreign.R == nil {
			foreign.R = &challengeThemeR{}
		}
		foreign.R.ThemeTagRelations = append(foreign.R.ThemeTagRelations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChallengeThemeID == foreign.ID {
				local.R.ChallengeTheme = foreign
				if foreign.R == nil {
					foreign.R = &challengeThemeR{}
				}
				foreign.R.ThemeTagRelations = append(foreign.R.ThemeTagRelations, local)
				break
			}
		}
	}

	return nil
}

// LoadTag allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (themeTagRelationL) LoadTag(ctx context.Context, e boil.ContextExecutor, singular bool, maybeThemeTagRelation interface{}, mods queries.Applicator) error {
	var slice []*ThemeTagRelation
	var object *ThemeTagRelation

	if singular {
		object = maybeThemeTagRelation.(*ThemeTagRelation)
	} else {
		slice = *maybeThemeTagRelation.(*[]*ThemeTagRelation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &themeTagRelationR{}
		}
		args = append(args, object.TagID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &themeTagRelationR{}
			}

			for _, a := range args {
				if a == obj.TagID {
					continue Outer
				}
			}

			args = append(args, obj.TagID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tags`),
		qm.WhereIn(`tags.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tag")
	}

	var resultSlice []*Tag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tag")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tags")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tags")
	}

	if len(themeTagRelationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tag = foreign
		if foreign.R == nil {
			foreign.R = &tagR{}
		}
		foreign.R.ThemeTagRelations = append(foreign.R.ThemeTagRelations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TagID == foreign.ID {
				local.R.Tag = foreign
				if foreign.R == nil {
					foreign.R = &tagR{}
				}
				foreign.R.ThemeTagRelations = append(foreign.R.ThemeTagRelations, local)
				break
			}
		}
	}

	return nil
}

// SetChallengeTheme of the themeTagRelation to the related item.
// Sets o.R.ChallengeTheme to related.
// Adds o to related.R.ThemeTagRelations.
func (o *ThemeTagRelation) SetChallengeTheme(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ChallengeTheme) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `theme_tag_relations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"challenge_theme_id"}),
		strmangle.WhereClause("`", "`", 0, themeTagRelationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChallengeThemeID = related.ID
	if o.R == nil {
		o.R = &themeTagRelationR{
			ChallengeTheme: related,
		}
	} else {
		o.R.ChallengeTheme = related
	}

	if related.R == nil {
		related.R = &challengeThemeR{
			ThemeTagRelations: ThemeTagRelationSlice{o},
		}
	} else {
		related.R.ThemeTagRelations = append(related.R.ThemeTagRelations, o)
	}

	return nil
}

// SetTag of the themeTagRelation to the related item.
// Sets o.R.Tag to related.
// Adds o to related.R.ThemeTagRelations.
func (o *ThemeTagRelation) SetTag(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tag) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `theme_tag_relations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"tag_id"}),
		strmangle.WhereClause("`", "`", 0, themeTagRelationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TagID = related.ID
	if o.R == nil {
		o.R = &themeTagRelationR{
			Tag: related,
		}
	} else {
		o.R.Tag = related
	}

	if related.R == nil {
		related.R = &tagR{
			ThemeTagRelations: ThemeTagRelationSlice{o},
		}
	} else {
		related.R.ThemeTagRelations = append(related.R.ThemeTagRelations, o)
	}

	return nil
}

// ThemeTagRelations retrieves all the records using an executor.
func ThemeTagRelations(mods ...qm.QueryMod) themeTagRelationQuery {
	mods = append(mods, qm.From("`theme_tag_relations`"))
	return themeTagRelationQuery{NewQuery(mods...)}
}

// FindThemeTagRelation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindThemeTagRelation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ThemeTagRelation, error) {
	themeTagRelationObj := &ThemeTagRelation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `theme_tag_relations` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, themeTagRelationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from theme_tag_relations")
	}

	return themeTagRelationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ThemeTagRelation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no theme_tag_relations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(themeTagRelationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	themeTagRelationInsertCacheMut.RLock()
	cache, cached := themeTagRelationInsertCache[key]
	themeTagRelationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			themeTagRelationAllColumns,
			themeTagRelationColumnsWithDefault,
			themeTagRelationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(themeTagRelationType, themeTagRelationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(themeTagRelationType, themeTagRelationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `theme_tag_relations` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `theme_tag_relations` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `theme_tag_relations` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, themeTagRelationPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into theme_tag_relations")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == themeTagRelationMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for theme_tag_relations")
	}

CacheNoHooks:
	if !cached {
		themeTagRelationInsertCacheMut.Lock()
		themeTagRelationInsertCache[key] = cache
		themeTagRelationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ThemeTagRelation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ThemeTagRelation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	themeTagRelationUpdateCacheMut.RLock()
	cache, cached := themeTagRelationUpdateCache[key]
	themeTagRelationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			themeTagRelationAllColumns,
			themeTagRelationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update theme_tag_relations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `theme_tag_relations` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, themeTagRelationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(themeTagRelationType, themeTagRelationMapping, append(wl, themeTagRelationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update theme_tag_relations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for theme_tag_relations")
	}

	if !cached {
		themeTagRelationUpdateCacheMut.Lock()
		themeTagRelationUpdateCache[key] = cache
		themeTagRelationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q themeTagRelationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for theme_tag_relations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for theme_tag_relations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ThemeTagRelationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), themeTagRelationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `theme_tag_relations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, themeTagRelationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in themeTagRelation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all themeTagRelation")
	}
	return rowsAff, nil
}

var mySQLThemeTagRelationUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ThemeTagRelation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no theme_tag_relations provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(themeTagRelationColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLThemeTagRelationUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	themeTagRelationUpsertCacheMut.RLock()
	cache, cached := themeTagRelationUpsertCache[key]
	themeTagRelationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			themeTagRelationAllColumns,
			themeTagRelationColumnsWithDefault,
			themeTagRelationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			themeTagRelationAllColumns,
			themeTagRelationPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert theme_tag_relations, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "theme_tag_relations", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `theme_tag_relations` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(themeTagRelationType, themeTagRelationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(themeTagRelationType, themeTagRelationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for theme_tag_relations")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == themeTagRelationMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(themeTagRelationType, themeTagRelationMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for theme_tag_relations")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for theme_tag_relations")
	}

CacheNoHooks:
	if !cached {
		themeTagRelationUpsertCacheMut.Lock()
		themeTagRelationUpsertCache[key] = cache
		themeTagRelationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ThemeTagRelation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ThemeTagRelation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no ThemeTagRelation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), themeTagRelationPrimaryKeyMapping)
	sql := "DELETE FROM `theme_tag_relations` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from theme_tag_relations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for theme_tag_relations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q themeTagRelationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no themeTagRelationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from theme_tag_relations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for theme_tag_relations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ThemeTagRelationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(themeTagRelationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), themeTagRelationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `theme_tag_relations` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, themeTagRelationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from themeTagRelation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for theme_tag_relations")
	}

	if len(themeTagRelationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ThemeTagRelation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindThemeTagRelation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ThemeTagRelationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ThemeTagRelationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), themeTagRelationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `theme_tag_relations`.* FROM `theme_tag_relations` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, themeTagRelationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ThemeTagRelationSlice")
	}

	*o = slice

	return nil
}

// ThemeTagRelationExists checks if the ThemeTagRelation row exists.
func ThemeTagRelationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `theme_tag_relations` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if theme_tag_relations exists")
	}

	return exists, nil
}
