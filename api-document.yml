swagger: '2.0'
info:
  description: 'This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.'
  version: 1.0.0
  title: Swagger Petstore
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: petstore.swagger.io
basePath: /v2
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: store
    description: Access to Petstore orders
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
schemes:
  - https
  - http
paths:
  /challengethemes:
    post:
      summary: Add a new challenge theme
      description: チャレンジネタ新規作成
      operationId: ''
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - type: string
          in: header
          name: Authorization
          description: JWT Token
        - in: formData
          type: file
          name: content
          description: image or video
          required: true
        - in: formData
          type: string
          name: theme_data
          description: JSON
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/challenge-theme'
          examples: {}
        '400':
          description: Bad Request
          schema: {}
        '403':
          description: Forbidden
          schema: {}
    parameters: []
    get:
      summary: ''
      operationId: get-challengethemes
      responses:
        '200':
          description: チャレンジネタのリスト
          schema:
            type: array
            items:
              $ref: '#/definitions/challenge-theme'
        '400':
          description: Bad Request
          schema: {}
      description: ''
      parameters:
        - type: boolean
          in: query
          name: recordable
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: 'Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.'
      operationId: findPetsByTags
      produces:
        - application/xml
        - application/json
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        '400':
          description: Invalid tag value
      security: []
      deprecated: true
  '/pet/{petId}':
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security: []
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      description: ''
      operationId: updatePetWithForm
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          type: integer
          format: int64
        - name: name
          in: formData
          description: Updated name of the pet
          required: false
          type: string
        - name: status
          in: formData
          description: Updated status of the pet
          required: false
          type: string
      responses:
        '405':
          description: Invalid input
      security: []
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: ''
      operationId: deletePet
      produces:
        - application/xml
        - application/json
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security: []
  '/pet/{petId}/uploadImage':
    post:
      tags:
        - pet
      summary: uploads an image
      description: ''
      operationId: uploadFile
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          type: integer
          format: int64
        - name: additionalMetadata
          in: formData
          description: Additional data to pass to server
          required: false
          type: string
        - name: file
          in: formData
          description: file to upload
          required: false
          type: file
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
      security: []
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
      security: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: ''
      operationId: placeOrder
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: order placed for purchasing the pet
          required: true
          schema:
            $ref: '#/definitions/Order'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        '400':
          description: Invalid Order
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: 'For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions'
      operationId: getOrderById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          type: integer
          maximum: 10
          minimum: 1
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors
      operationId: deleteOrder
      produces:
        - application/xml
        - application/json
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          type: integer
          minimum: 1
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/xml
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  '/challengethemes/{challenge_theme_id}':
    parameters:
      - type: string
        name: challenge_theme_id
        in: path
        required: true
    get:
      summary: ''
      tags: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/challenge-theme'
        '404':
          description: Not Found
          schema: {}
      operationId: get-challengetheme-challenge_theme_id
  /challengerecords:
    parameters: []
    get:
      summary: ''
      operationId: get-challengerecords
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/challenge-record'
        '400':
          description: Bad Request
          schema: {}
      parameters:
        - type: boolean
          in: query
          name: recordable
      description: created_atが新しい順でチャレンジレコードのリストを取得
    post:
      summary: ''
      operationId: post-challengerecords
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/challenge-record'
        '400':
          description: Bad Request
          schema: {}
        '403':
          description: Forbidden
          schema: {}
      parameters:
        - in: formData
          type: file
          name: content
          description: image or movie
          required: true
        - in: formData
          type: string
          name: record_data
          description: JSON
          required: true
  '/challengethemes/{challenge_theme_id}/challengerecords':
    parameters:
      - type: string
        name: challenge_theme_id
        in: path
        required: true
    get:
      summary: ''
      tags: []
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/challenge-record'
        '400':
          description: Bad Request
          schema: {}
        '404':
          description: Not Found
          schema: {}
      operationId: get-challengetheme-challenge_theme_id-challengerecord
      parameters:
        - type: string
          in: query
          name: sort
  '/users/{user_id}/challengethemes':
    parameters:
      - type: string
        name: user_id
        in: path
        required: true
    get:
      summary: ''
      tags: []
      responses:
        '200':
          description: チャレンジネタのリスト
          schema:
            type: array
            items:
              $ref: '#/definitions/challenge-theme'
        '400':
          description: Bad Request
          schema: {}
        '404':
          description: Not Found
          schema: {}
      operationId: get-users-user_id-challengethemes
      parameters:
        - type: boolean
          in: query
          name: recordable
      description: ''
  '/users/{user_id}/challengerecords':
    parameters:
      - type: string
        name: user_id
        in: path
        required: true
    get:
      summary: ''
      tags: []
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/challenge-record'
        '400':
          description: Bad Request
          schema: {}
        '404':
          description: Not Found
          schema: {}
      operationId: get-users-user_id-challengerecords
      parameters:
        - type: boolean
          in: query
          name: recordable
  /users:
    post:
      summary: ''
      operationId: post-users
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/user'
        '400':
          description: Bad Request
          schema: {}
        '401':
          description: Unauthorized
          schema: {}
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              id_token:
                type: string
                description: Firebase認証で取得したidToken
              name:
                type: string
            required:
              - id_token
              - name
  '/users/{user_id}':
    parameters:
      - type: string
        name: user_id
        in: path
        required: true
    get:
      summary: ''
      tags: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/user'
        '404':
          description: Not Found
          schema: {}
      operationId: get-users-user_id
securityDefinitions: {}
definitions:
  challenge-theme:
    title: challenge-theme
    type: object
    description: ''
    properties:
      id:
        type: integer
      title:
        type: string
      description:
        type: string
      user:
        $ref: '#/definitions/user'
      recordable:
        type: boolean
      is_int:
        type:
          - boolean
          - 'null'
      unit:
        type:
          - string
          - 'null'
      ranking_type:
        type:
          - string
          - 'null'
        enum:
          - ASC
          - DESC
          - FAV
      created_at:
        type: string
        format: date-time
    required:
      - id
      - title
      - description
      - user
      - recordable
      - is_int
      - unit
      - ranking_type
      - created_at
  user:
    title: user
    type: object
    description: ''
    properties:
      id:
        type: integer
      name:
        type: string
    required:
      - id
      - name
  challenge-record:
    title: challenge-record
    type: object
    description: ''
    properties:
      id:
        type: integer
      content:
        type: string
        format: uri
      comment:
        type: string
      challenge_theme:
        $ref: '#/definitions/challenge-theme'
      user:
        $ref: '#/definitions/user'
      record:
        type: number
      created_at:
        type: string
        format: date-time
    required:
      - id
      - content
      - comment
      - challenge_theme
      - user
      - record
      - created_at
  tag:
    title: tag
    type: object
    properties:
      id:
        type: integer
      text:
        type: string
    required:
      - id
      - text
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
